package edu.asu.cse535.assignment3;

/**
 * Created by Shashank on 11/26/2016.
 */

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

public class AndroidLibsvmClassifier {
    /** Called when the activity is first created. */
    //private static final String TAG = "Libsvm";
    Intent intent;


    // svm native
    private native int trainClassifierNative(String trainingFile, int kernelType,
                                             int cost, float gamma, int isProb, String modelFile);
    private native int doClassificationNative(float values[][], int indices[][],
                                              int isProb, String modelFile, int labels[], double probs[]);

    static {
        System.loadLibrary("signal");
    }

    public void train() {
        // Svm training
        int kernelType = 1; // Radial basis function
        int cost = 4; // Cost
        int isProb = 0;
        float gamma = 0.25f; // Gamma
        String trainingFileLoc = Constants.TRAINING_DATA_FILE;
        String modelFileLoc = Constants.MODEL_FILE;
        if (trainClassifierNative(trainingFileLoc, kernelType, cost, gamma, isProb,
                modelFileLoc) == -1) {
        }
        Log.w(this.getClass().getSimpleName(), "Finished training the classifier");
    }

    /**
     * classify generate labels for features.
     * Return:
     * 	-1: Error
     * 	0: Correct
     */
    public int callSVM(float values[][], int indices[][], int groundTruth[], int isProb, String modelFile,
                       int labels[], double probs[]) {
        // SVM type
        final int C_SVC = 0;
        final int NU_SVC = 1;
        final int ONE_CLASS_SVM = 2;
        final int EPSILON_SVR = 3;
        final int NU_SVR = 4;

        // For accuracy calculation
        int correct = 0;
        int total = 0;
        float error = 0;
        float sump = 0, sumt = 0, sumpp = 0, sumtt = 0, sumpt = 0;
        float MSE, SCC, accuracy;

        int num = values.length;
        int svm_type = C_SVC;
        if (num != indices.length)
            return -1;
        // If isProb is true, you need to pass in a real double array for probability array
        int r = doClassificationNative(values, indices, isProb, modelFile, labels, probs);

        // Calculate accuracy
        if (groundTruth != null) {
            if (groundTruth.length != indices.length) {
                return -1;
            }
            for (int i = 0; i < num; i++) {
                int predict_label = labels[i];
                int target_label = groundTruth[i];
                if(predict_label == target_label)
                    ++correct;
                error += (predict_label-target_label)*(predict_label-target_label);
                sump += predict_label;
                sumt += target_label;
                sumpp += predict_label*predict_label;
                sumtt += target_label*target_label;
                sumpt += predict_label*target_label;
                ++total;
            }

            if (svm_type==NU_SVR || svm_type==EPSILON_SVR)
            {
                MSE = error/total; // Mean square error
                SCC = ((total*sumpt-sump*sumt)*(total*sumpt-sump*sumt)) / ((total*sumpp-sump*sump)*(total*sumtt-sumt*sumt)); // Squared correlation coefficient
            }
            accuracy = (float)correct/total*100;
            Log.w("afdas", "Classification accuracy is " + accuracy);
        }

        return r;
    }

    public String classify(ActivityData activityData) {
        // Svm classification
        Log.w("Inside ", "Classifier of data");
        float[][] values = new float[1][150];
        float[] ary = new float[150];
        values[0] = ary;
//        float[][] values = {{1.6082905531f,5.2563643456f,8.3552656174f,2.2751426697f,4.1580195427f,12.5917387009f,2.1966896057f,2.0790097713f,6.0016698837f,4.6679654121f,-3.6480736732f,4.5895118713f,11.3757133484f,-13.7685365677f,5.6878566742f,7.4530539513f,-7.4138274193f,2.5497288704f,8.9436645508f,-8.0806789398f,4.1187930107f,8.6690788269f,-12.5917387009f,4.1187930107f,4.5502853394f,-9.2182512283f,2.6281821728f,4.2364726067f,-8.9828910828f,1.6475172043f,10.2381420135f,-8.3944921494f,3.0596747398f,8.3944921494f,-6.3154826164f,2.4712758064f,10.3950490952f,-7.9237728119f,2.9419949055f,8.6690788269f,-9.7281961441f,3.2950344086f,4.8248715401f,-8.5513982773f,2.4712758064f,6.6292953491f,-9.1790237427f,1.961329937f,9.2182512283f,-7.3746004105f,2.2359161377f,9.7674236298f,-7.6099600792f,2.392822504f,9.9635562897f,-11.611073494f,2.8243150711f,6.4331622124f,-9.6889696121f,2.7066352367f,3.6480736732f,-7.5707335472f,2.000556469f,9.5320634842f,-9.1790237427f,3.6480736732f,8.4729452133f,-6.0408964157f,2.7850885391f,10.5519552231f,-9.4536104202f,3.3734874725f,9.1005706787f,-9.7674236298f,3.84420681f,5.0210046768f,-8.2768125534f,2.9419949055f,4.8248715401f,-10.1989154816f,1.6475172043f,9.2967042923f,-8.7083053589f,3.3342609406f,8.2768125534f,-7.1000142097f,2.8243150711f,8.8652114868f,-8.9828910828f,3.4519407749f,6.7469749451f,-9.8851032257f,3.922659874f,3.84420681f,-8.1983594894f,2.8243150711f,7.2961473465f,-11.2972602844f,2.3535959721f,8.3944921494f,-7.0607876778f,1.7651969194f,8.8259849548f,-7.1784677505f,2.5889556408f,9.2182512283f,-11.6895265579f,2.9419949055f,6.2370290756f,-9.9635562897f,3.0596747398f,3.6873002052f,-7.1784677505f,2.2359161377f,8.9828910828f,-10.748087883f,1.6867437363f,8.4729452133f,-6.9431080818f,2.1182363033f,9.1790237427f,-7.4138274193f,3.4519407749f,9.1005706787f,-10.630408287f,3.7265269756f,5.1779112816f,-9.2182512283f,2.6674087048f,4.1580195427f,-9.2574777603f,1.8828767538f,9.6105165482f,-9.4536104202f,3.5696206093f,7.8060932159f,-6.7469749451f,2.1966896057f,8.9436645508f,-10.1596889496f,3.9618864059f,7.6491866112f,-10.5127286911f,3.8049800396f,4.1580195427f,-8.0414524078f,2.8243150711f,4.7856450081f,-9.8066501617f,2.432049036f}};
        float[] xvalues = activityData.getX_values();
        float[] yvalues = activityData.getY_values();
        float[] zvalues = activityData.getZ_values();

        int i = 0;
        int count = 0;
        ;
        while(i<150) {
            ary[i++] = xvalues[count];
            ary[i++] = yvalues[count];
            ary[i++] = zvalues[count];
            count++;
        }

        int[][] indices = new int [1][150];
        int[] ary1 = new int [150];
        indices[0] = ary1;

        for(int j=0;j<150;j++) {
            ary1[j] = j+1;
        }

        int[] groundTruth = null;
        int[] labels = new int[1];
        double[] probs = new double[1];
        int isProb = 0; // Not probability prediction
        String modelFileLoc = Constants.MODEL_FILE;

        int classified =  callSVM(values, indices, groundTruth, isProb, modelFileLoc, labels, probs);
        if (classified !=0) {
            Log.w(this.getClass().getSimpleName(), "Classification is incorrect");
            return "Activity not found";
        }

        Log.w("Test", String.valueOf(classified));

        switch (labels[0]) {
            case 1:
                return Constants.ACTIVITY_EATING;
            case 2:
                return Constants.ACTIVITY_WALKING;
            case 3:
                return Constants.ACTIVITY_RUNNING;
            default:
                return "Activity not found";
        }
    }

    public float testAccuracy() {
        // Svm classification
        Log.w("Inside ", "Classifier of data");

        float[][] values = {
                {1.6082905531f,5.2563643456f,8.3552656174f,2.2751426697f,4.1580195427f,12.5917387009f,2.1966896057f,2.0790097713f,6.0016698837f,4.6679654121f,-3.6480736732f,4.5895118713f,11.3757133484f,-13.7685365677f,5.6878566742f,7.4530539513f,-7.4138274193f,2.5497288704f,8.9436645508f,-8.0806789398f,4.1187930107f,8.6690788269f,-12.5917387009f,4.1187930107f,4.5502853394f,-9.2182512283f,2.6281821728f,4.2364726067f,-8.9828910828f,1.6475172043f,10.2381420135f,-8.3944921494f,3.0596747398f,8.3944921494f,-6.3154826164f,2.4712758064f,10.3950490952f,-7.9237728119f,2.9419949055f,8.6690788269f,-9.7281961441f,3.2950344086f,4.8248715401f,-8.5513982773f,2.4712758064f,6.6292953491f,-9.1790237427f,1.961329937f,9.2182512283f,-7.3746004105f,2.2359161377f,9.7674236298f,-7.6099600792f,2.392822504f,9.9635562897f,-11.611073494f,2.8243150711f,6.4331622124f,-9.6889696121f,2.7066352367f,3.6480736732f,-7.5707335472f,2.000556469f,9.5320634842f,-9.1790237427f,3.6480736732f,8.4729452133f,-6.0408964157f,2.7850885391f,10.5519552231f,-9.4536104202f,3.3734874725f,9.1005706787f,-9.7674236298f,3.84420681f,5.0210046768f,-8.2768125534f,2.9419949055f,4.8248715401f,-10.1989154816f,1.6475172043f,9.2967042923f,-8.7083053589f,3.3342609406f,8.2768125534f,-7.1000142097f,2.8243150711f,8.8652114868f,-8.9828910828f,3.4519407749f,6.7469749451f,-9.8851032257f,3.922659874f,3.84420681f,-8.1983594894f,2.8243150711f,7.2961473465f,-11.2972602844f,2.3535959721f,8.3944921494f,-7.0607876778f,1.7651969194f,8.8259849548f,-7.1784677505f,2.5889556408f,9.2182512283f,-11.6895265579f,2.9419949055f,6.2370290756f,-9.9635562897f,3.0596747398f,3.6873002052f,-7.1784677505f,2.2359161377f,8.9828910828f,-10.748087883f,1.6867437363f,8.4729452133f,-6.9431080818f,2.1182363033f,9.1790237427f,-7.4138274193f,3.4519407749f,9.1005706787f,-10.630408287f,3.7265269756f,5.1779112816f,-9.2182512283f,2.6674087048f,4.1580195427f,-9.2574777603f,1.8828767538f,9.6105165482f,-9.4536104202f,3.5696206093f,7.8060932159f,-6.7469749451f,2.1966896057f,8.9436645508f,-10.1596889496f,3.9618864059f,7.6491866112f,-10.5127286911f,3.8049800396f,4.1580195427f,-8.0414524078f,2.8243150711f,4.7856450081f,-9.8066501617f,2.432049036f},
                {1.5298373699f,2.2359161377f,9.7281961441f,2.3143694401f,0.3530393839f,10.4735021591f,2.432049036f,-4.4718322754f,10.8657674789f,0.8629851937f,-6.1978025436f,10.9442214966f,-0.3922659755f,-3.4519407749f,10.9834480286f,-1.4121575356f,-0.5099458098f,10.5519552231f,-0.2353595942f,1.1375713348f,8.3552656174f,0.7060787678f,1.922103405f,8.0806789398f,0.0784531981f,1.7259703875f,10.5127286911f,1.3729310036f,0.9022117853f,10.0027828217f,2.5889556408f,-1.2944778204f,9.7281961441f,3.1773545742f,-1.961329937f,10.826540947f,2.8635418415f,-2.9027683735f,10.3558225632f,1.6867437363f,-3.4911673069f,10.0420093536f,1.2944778204f,-4.8640980721f,10.5519552231f,-0.3922659755f,-3.5696206093f,10.3950490952f,-1.5298373699f,-1.922103405f,10.5127286911f,-1.216024518f,0f,10.1596889496f,-0.9806649685f,1.176797986f,10.2381420135f,-0.2745862007f,2.0397832394f,9.5320634842f,0.784531951f,2.3535959721f,9.3359308243f,0.9414383769f,2.5105023384f,10.0027828217f,1.961329937f,2.7458620071f,9.3751573563f,1.4513841867f,2.1182363033f,9.4928369522f,2.6674087048f,-0.0784531981f,10.630408287f,2.3143694401f,-0.1176797971f,9.0221176147f,2.6674087048f,-1.176797986f,10.3165950775f,2.3143694401f,-1.8436501026f,9.9635562897f,2.2359161377f,-3.2558076382f,9.6889696121f,1.6867437363f,-4.4326057434f,8.7475318909f,1.2552511692f,-5.8839898109f,8.9044380188f,0.2353595942f,-6.9431080818f,8.3552656174f,-1.5298373699f,-7.5707335472f,9.8458766937f,-3.3342609406f,-5.1779112816f,9.8458766937f,-2.9027683735f,-2.000556469f,9.4928369522f,-1.1375713348f,0.2745862007f,9.7674236298f,-0.6276255846f,1.6082905531f,9.3359308243f,0.588398993f,2.1966896057f,9.2182512283f,0.5491724014f,2.6674087048f,10.0420093536f,1.2944778204f,2.7850885391f,9.3751573563f,1.6867437363f,0.9414383769f,9.0613441467f,2.5497288704f,-1.216024518f,9.7281961441f,2.7458620071f,-2.5105023384f,9.8851032257f,2.6674087048f,-3.3734874725f,9.7674236298f,1.8436501026f,-4.8248715401f,10.4735021591f,1.1375713348f,-5.805536747f,9.9635562897f,-1.3729310036f,-4.8248715401f,11.454167366f,-2.2751426697f,-1.7259703875f,10.9049949646f,-0.6668521762f,0.8629851937f,8.8652114868f,1.1375713348f,2.2359161377f,8.3552656174f},
                {0.5099458098f,-3.6873002052f,9.4928369522f,0f,-5.4132704735f,10.0027828217f,-2.000556469f,-5.766310215f,11.7679796219f,-2.432049036f,-2.392822504f,9.4143838882f,-0.039226599f,0.0784531981f,8.0414524078f,-0.039226599f,1.4513841867f,8.8259849548f,0.1569063962f,1.7651969194f,8.7475318909f,0.7453053594f,1.0983448029f,8.9044380188f,1.0591181517f,-1.5298373699f,9.5712900162f,0.3922659755f,-3.4911673069f,9.9243297577f,0.3138127923f,-5.2955908775f,10.748087883f,0.3138127923f,-5.6094036102f,9.0221176147f,-0.6668521762f,-5.9232163429f,8.8652114868f,-2.000556469f,-6.0801229477f,9.5320634842f,-4.2756991386f,-4.3149256706f,10.5911817551f,-4.5895118713f,-1.1375713348f,9.7281961441f,-0.4314925969f,0.588398993f,7.68841362f,-0.2745862007f,2.4712758064f,8.5906248093f,0.5099458098f,1.922103405f,8.9828910828f,0.9414383769f,-0.039226599f,9.6497430801f,1.176797986f,-1.7651969194f,9.5320634842f,0.6668521762f,-4.0795664787f,9.6105165482f,0.1961329877f,-6.1193494797f,10.3558225632f,-0.588398993f,-6.2762556076f,8.9436645508f,-1.6475172043f,-6.1193494797f,8.5513982773f,-3.5303938389f,-5.5309505463f,9.4143838882f,-4.4718322754f,-3.2558076382f,9.2967042923f,-3.0596747398f,-0.588398993f,10.1989154816f,-1.8044235706f,1.8436501026f,9.1397972107f,1.2552511692f,2.5497288704f,8.4337186813f,1.2944778204f,3.6088471413f,8.7475318909f,1.8436501026f,2.2751426697f,7.6491866112f,1.8044235706f,-1.922103405f,9.6105165482f,0.784531951f,-3.9618864059f,10.4342756271f,0.8237586021f,-4.5502853394f,9.7281961441f,0.0784531981f,-5.2563643456f,9.8066501617f,0.1961329877f,-5.5701770782f,9.1790237427f,-0.1961329877f,-5.6878566742f,9.1397972107f,-0.1569063962f,-5.4917240143f,8.7083053589f,-0.2745862007f,-5.2171378136f,8.7475318909f,-2.1966896057f,-6.0801229477f,11.4149398804f,-3.6480736732f,-4.0011129379f,11.0226745605f,-1.5298373699f,-0.784531951f,8.6298513412f,-0.039226599f,1.0198916197f,8.2768125534f,1.1375713348f,1.5298373699f,9.3751573563f,1.1375713348f,2.3535959721f,9.5320634842f,1.4513841867f,2.000556469f,9.6889696121f,1.8044235706f,0.8629851937f,9.5320634842f,0.8629851937f,0.1961329877f,10.1204624176f,-0.0784531981f,0.2353595942f,10.9442214966f},
                {1.6082905531f,5.2563643456f,8.3552656174f,2.2751426697f,4.1580195427f,12.5917387009f,2.1966896057f,2.0790097713f,6.0016698837f,4.6679654121f,-3.6480736732f,4.5895118713f,11.3757133484f,-13.7685365677f,5.6878566742f,7.4530539513f,-7.4138274193f,2.5497288704f,8.9436645508f,-8.0806789398f,4.1187930107f,8.6690788269f,-12.5917387009f,4.1187930107f,4.5502853394f,-9.2182512283f,2.6281821728f,4.2364726067f,-8.9828910828f,1.6475172043f,10.2381420135f,-8.3944921494f,3.0596747398f,8.3944921494f,-6.3154826164f,2.4712758064f,10.3950490952f,-7.9237728119f,2.9419949055f,8.6690788269f,-9.7281961441f,3.2950344086f,4.8248715401f,-8.5513982773f,2.4712758064f,6.6292953491f,-9.1790237427f,1.961329937f,9.2182512283f,-7.3746004105f,2.2359161377f,9.7674236298f,-7.6099600792f,2.392822504f,9.9635562897f,-11.611073494f,2.8243150711f,6.4331622124f,-9.6889696121f,2.7066352367f,3.6480736732f,-7.5707335472f,2.000556469f,9.5320634842f,-9.1790237427f,3.6480736732f,8.4729452133f,-6.0408964157f,2.7850885391f,10.5519552231f,-9.4536104202f,3.3734874725f,9.1005706787f,-9.7674236298f,3.84420681f,5.0210046768f,-8.2768125534f,2.9419949055f,4.8248715401f,-10.1989154816f,1.6475172043f,9.2967042923f,-8.7083053589f,3.3342609406f,8.2768125534f,-7.1000142097f,2.8243150711f,8.8652114868f,-8.9828910828f,3.4519407749f,6.7469749451f,-9.8851032257f,3.922659874f,3.84420681f,-8.1983594894f,2.8243150711f,7.2961473465f,-11.2972602844f,2.3535959721f,8.3944921494f,-7.0607876778f,1.7651969194f,8.8259849548f,-7.1784677505f,2.5889556408f,9.2182512283f,-11.6895265579f,2.9419949055f,6.2370290756f,-9.9635562897f,3.0596747398f,3.6873002052f,-7.1784677505f,2.2359161377f,8.9828910828f,-10.748087883f,1.6867437363f,8.4729452133f,-6.9431080818f,2.1182363033f,9.1790237427f,-7.4138274193f,3.4519407749f,9.1005706787f,-10.630408287f,3.7265269756f,5.1779112816f,-9.2182512283f,2.6674087048f,4.1580195427f,-9.2574777603f,1.8828767538f,9.6105165482f,-9.4536104202f,3.5696206093f,7.8060932159f,-6.7469749451f,2.1966896057f,8.9436645508f,-10.1596889496f,3.9618864059f,7.6491866112f,-10.5127286911f,3.8049800396f,4.1580195427f,-8.0414524078f,2.8243150711f,4.7856450081f,-9.8066501617f,2.432049036f},
                {1.176797986f,5.5309505463f,8.8259849548f,2.2359161377f,1.0983448029f,3.0989012718f,7.68841362f,-6.8646550179f,6.5116152763f,14.474615097f,-8.0022258759f,5.5701770782f,10.630408287f,-9.2182512283f,5.5701770782f,5.805536747f,-8.5906248093f,2.0790097713f,4.9033250809f,-8.3160390854f,1.922103405f,9.7281961441f,-9.5320634842f,2.9419949055f,8.3160390854f,-7.3353738785f,1.6475172043f,8.7867584229f,-8.3944921494f,2.9027683735f,7.0215611458f,-10.3950490952f,3.4519407749f,3.5696206093f,-8.1983594894f,1.922103405f,6.7862014771f,-10.708861351f,2.392822504f,8.5121717453f,-8.0414524078f,2.7850885391f,7.766866684f,-8.0022258759f,3.0596747398f,8.1591329575f,-12.3956050873f,4.5110588074f,6.1193494797f,-10.8657674789f,4.0795664787f,3.4519407749f,-9.0221176147f,2.3143694401f,8.7083053589f,-11.1011276245f,3.2950344086f,9.4536104202f,-7.6491866112f,2.5105023384f,10.1596889496f,-10.748087883f,3.7657535076f,7.8060932159f,-12.2386989594f,4.6679654121f,4.1187930107f,-9.2574777603f,2.7066352367f,4.3149256706f,-8.0022258759f,1.961329937f,9.9243297577f,-9.4143838882f,2.7458620071f,8.3944921494f,-8.0806789398f,2.7458620071f,8.4337186813f,-11.6503000259f,3.2558076382f,5.727083683f,-10.5519552231f,3.4519407749f,3.2165811062f,-8.2768125534f,2.0790097713f,8.4337186813f,-10.669634819f,1.8044235706f,9.0221176147f,-5.6094036102f,1.4513841867f,8.7475318909f,-7.3746004105f,2.5497288704f,8.5121717453f,-11.3757133484f,2.9419949055f,5.1386842728f,-9.1397972107f,2.6674087048f,3.6873002052f,-9.4928369522f,2.392822504f,8.5121717453f,-10.708861351f,2.432049036f,7.3746004105f,-7.1000142097f,1.922103405f,8.3944921494f,-10.5519552231f,3.4911673069f,8.0022258759f,-11.2188072205f,3.5303938389f,4.5895118713f,-9.1790237427f,2.7458620071f,3.9618864059f,-10.1596889496f,1.7651969194f,8.9436645508f,-9.6497430801f,3.4519407749f,7.4530539513f,-7.766866684f,2.0790097713f,7.9629998207f,-9.6105165482f,3.8049800396f,4.7856450081f,-9.8458766937f,2.7458620071f,3.6088471413f,-10.1596889496f,2.5497288704f,8.3944921494f,-10.1204624176f,3.2165811062f,7.8453197479f,-7.68841362f,1.922103405f,8.7083053589f,-9.1397972107f,3.1773545742f,7.0607876778f,-10.8657674789f,3.6088471413f},
                {-1.4513841867f,4.1187930107f,10.1989154816f,-0.3138127923f,3.7657535076f,7.6491866112f,2.7850885391f,0.2745862007f,4.7856450081f,11.1795806885f,-10.1596889496f,9.4143838882f,9.2967042923f,-7.1000142097f,4.7071919441f,9.1397972107f,-9.1005706787f,3.7265269756f,8.4729452133f,-11.1403541565f,3.4911673069f,4.9033250809f,-9.2967042923f,2.5889556408f,4.9033250809f,-9.1005706787f,1.176797986f,8.5121717453f,-9.6105165482f,2.7850885391f,8.3552656174f,-8.0806789398f,3.0989012718f,8.2375860214f,-8.3944921494f,3.4519407749f,7.4530539513f,-9.6889696121f,3.6480736732f,4.5895118713f,-8.5906248093f,2.2359161377f,7.4530539513f,-10.5519552231f,1.3729310036f,7.4138274193f,-7.4922804832f,2.1966896057f,8.7083053589f,-7.6491866112f,2.6674087048f,8.9044380188f,-11.1011276245f,3.4519407749f,5.9624428749f,-9.6497430801f,3.6480736732f,3.3734874725f,-8.0414524078f,2.6281821728f,9.4536104202f,-11.2972602844f,3.5696206093f,7.2961473465f,-7.5707335472f,2.0397832394f,8.7867584229f,-9.4536104202f,3.8049800396f,7.6491866112f,-10.9049949646f,4.3541526794f,4.2756991386f,-9.0221176147f,3.0989012718f,4.4326057434f,-9.7674236298f,2.4712758064f,8.6298513412f,-9.3359308243f,3.1381278038f,7.2961473465f,-7.8453197479f,2.9027683735f,7.8845462799f,-9.5712900162f,3.883433342f,6.1585760117f,-10.3558225632f,4.3149256706f,3.2558076382f,-8.3552656174f,2.7850885391f,7.1784677505f,-11.4149398804f,2.6674087048f,7.8060932159f,-8.5906248093f,2.4712758064f,7.5315070152f,-9.4928369522f,3.2165811062f,7.2569208145f,-12.0817928314f,3.84420681f,4.9817781448f,-10.0027828217f,3.8049800396f,3.883433342f,-9.8851032257f,2.7458620071f,7.1784677505f,-10.4342756271f,3.2558076382f,7.6099600792f,-7.2569208145f,2.8635418415f,9.1397972107f,-10.748087883f,4.5502853394f,7.2176942825f,-11.3757133484f,4.2756991386f,4.0011129379f,-8.6298513412f,2.6674087048f,4.5110588074f,-9.3751573563f,1.961329937f,8.9436645508f,-9.4143838882f,3.4127140045f,7.2176942825f,-7.6099600792f,2.5889556408f,8.1199064255f,-9.4928369522f,3.3342609406f,6.5116152763f,-10.1989154816f,4.1580195427f,3.0596747398f,-7.8453197479f,2.1966896057f,6.1978025436f,-9.8851032257f,2.1182363033f,8.5121717453f,-8.3160390854f,2.8243150711f},
                {17.0243434906f,-17.8088760376f,3.6873002052f,13.7685365677f,-0.588398993f,5.766310215f,15.416053772f,4.0403394699f,14.9453344345f,19.4171657562f,-18.3972740173f,13.1801376343f,9.7674236298f,-25.8111019135f,-2.6281821728f,14.474615097f,-3.4519407749f,7.4138274193f,7.4922804832f,9.4143838882f,9.3751573563f,19.5348472595f,-8.8652114868f,9.9243297577f,1.4906107187f,-14.8668813705f,-0.3138127923f,24.0851325989f,-2.6674087048f,8.3160390854f,4.2364726067f,8.4337186813f,4.0011129379f,24.7912101746f,-3.922659874f,13.8469896317f,3.6088471413f,-12.2386989594f,0.8237586021f,21.3392696381f,-8.3944921494f,6.1585760117f,2.432049036f,6.7077484131f,5.6878566742f,27.4978466034f,2.2751426697f,19.3387126923f,5.9232163429f,-10.4735021591f,3.7657535076f,31.3812789917f,-11.6895265579f,16.5928516388f,9.1005706787f,4.2756991386f,9.1790237427f,29.3414955139f,8.4729452133f,18.3972740173f,11.2188072205f,-8.6690788269f,6.3939356804f,8.7475318909f,-18.9072208405f,-0.784531951f,18.1619148254f,0.3138127923f,5.9232163429f,10.0420093536f,11.8464326859f,10.1989154816f,17.9265556335f,-8.4337186813f,12.5132846832f,1.216024518f,-16.0436782837f,1.3729310036f,24.4773979187f,-2.1966896057f,11.611073494f,5.0602312088f,9.6497430801f,9.1005706787f,20.2409248352f,-4.7464184761f,16.9066638947f,3.0204482079f,-13.4939498901f,-0.9022117853f,21.1039104462f,-5.6486301422f,7.9629998207f,2.392822504f,5.9624428749f,4.1187930107f,25.6934223175f,2.5497288704f,15.9652261734f,7.1000142097f,-8.8259849548f,3.922659874f,33.7348747253f,1.961329937f,19.4563922882f,9.5320634842f,8.7867584229f,8.5906248093f,23.1829204559f,18.8679943085f,20.6724185944f,9.8458766937f,-1.922103405f,6.6685218811f,9.2182512283f,-19.4563922882f,0.1176797971f,15.6906394958f,1.2944778204f,7.766866684f,8.5906248093f,8.7083053589f,11.611073494f,18.4365024567f,-5.2563643456f,9.6889696121f,4.4718322754f,-12.9055509567f,1.6475172043f,25.0265693665f,1.4906107187f,10.787314415f,5.4132704735f,8.7475318909f,6.6292953491f,19.9271125793f,-1.961329937f,10.826540947f,4.6287388802f,-10.748087883f,1.6082905531f,24.5558509827f,-1.6082905531f,5.4524974823f,5.727083683f,8.3160390854f,5.0210046768f,31.8127727509f,7.1000142097f,19.1425800323f},
                {-0.5491724014f,6.5900688171f,14.592294693f,1.4906107187f,-7.6099600792f,1.7259703875f,23.2221469879f,-9.8851032257f,9.4536104202f,4.6679654121f,7.2569208145f,8.5121717453f,30.8713340759f,0.3138127923f,16.4751720428f,6.8646550179f,-10.4342756271f,3.6480736732f,30.0475749969f,-5.766310215f,10.1596889496f,9.9635562897f,6.2762556076f,7.2569208145f,27.6547527313f,4.2364726067f,14.3177089691f,9.1005706787f,-8.3160390854f,4.8640980721f,16.0044517517f,-19.4956188202f,3.6480736732f,16.4751720428f,2.392822504f,8.3552656174f,12.3171520233f,11.8856592178f,8.7475318909f,19.1033535004f,-6.9823346138f,7.6491866112f,6.9823346138f,-13.9254426956f,-0.9022117853f,21.1823635101f,1.3729310036f,7.9237728119f,8.8259849548f,12.1210193634f,10.3165950775f,21.1431369781f,-2.8243150711f,9.7674236298f,6.7077484131f,-12.6309652328f,1.6082905531f,25.8111019135f,-6.4723887444f,8.5121717453f,1.6475172043f,5.766310215f,4.0403394699f,24.7912101746f,-5.4132704735f,11.2580337524f,5.8839898109f,-14.4353885651f,2.392822504f,33.2641563416f,-6.0408964157f,8.4729452133f,9.3359308243f,5.5701770782f,7.727640152f,33.0680236816f,12.1602458954f,20.3193778992f,10.1204624176f,-5.8839898109f,4.6287388802f,29.3414955139f,-16.2790393829f,10.2773685455f,11.3364868164f,2.4712758064f,6.5508418083f,17.2204761505f,14.592294693f,13.9646692276f,12.4740581512f,-4.6679654121f,5.9232163429f,4.6287388802f,-10.630408287f,0.3922659755f,17.3773841858f,4.5502853394f,6.5900688171f,2.9812214375f,10.8657674789f,9.8851032257f,18.4365024567f,-2.1574628353f,8.1199064255f,3.4911673069f,-11.454167366f,2.1966896057f,24.7519836426f,1.2944778204f,9.0221176147f,5.5701770782f,11.493393898f,5.2955908775f,15.9259996414f,-1.961329937f,10.4735021591f,1.8044235706f,-11.2972602844f,-0.1176797971f,19.5740737915f,-1.6082905531f,2.4712758064f,1.7259703875f,8.5513982773f,4.5110588074f,26.3995018005f,3.0989012718f,11.493393898f,5.6094036102f,-6.5116152763f,1.6475172043f,29.3022689819f,1.8436501026f,6.9823346138f,10.2773685455f,7.3746004105f,9.2182512283f,16.200586319f,16.4359455109f,15.2983732224f,12.0425662994f,-3.3734874725f,6.9431080818f,5.4917240143f,-13.5724029541f,0f,15.1022405624f,4.9425516129f,5.4917240143f},
                {2.000556469f,2.1182363033f,4.3149256706f,5.1386842728f,2.6674087048f,9.1005706787f,13.2585906982f,-2.6281821728f,11.493393898f,2.2359161377f,-11.9641122818f,-1.4906107187f,19.2602596283f,-9.4928369522f,5.9232163429f,7.1000142097f,5.6878566742f,7.6099600792f,22.9083347321f,-2.8243150711f,11.6503000259f,2.000556469f,-16.7497577667f,4.5895118713f,27.1840324402f,-11.571846962f,6.9431080818f,14.8668813705f,10.1989154816f,3.9618864059f,25.1834774017f,-8.5906248093f,8.8259849548f,2.7066352367f,-19.2602596283f,1.8436501026f,27.3017120361f,-6.9038815498f,6.825428009f,10.787314415f,9.7674236298f,6.5508418083f,19.1818065643f,-6.2762556076f,11.6503000259f,3.2950344086f,-14.7099742889f,-0.3530393839f,21.2608165741f,-8.9828910828f,7.4922804832f,13.0232305527f,9.8066501617f,8.9828910828f,23.3398265839f,-6.6292953491f,9.9243297577f,2.8635418415f,-12.3956050873f,-0.8237586021f,21.8492164612f,-8.1591329575f,11.8464326859f,6.6292953491f,5.3348174095f,8.2768125534f,22.280708313f,-2.432049036f,7.9629998207f,3.7657535076f,-14.2000284195f,-2.1182363033f,24.5950775146f,-2.432049036f,11.454167366f,3.922659874f,7.0215611458f,9.3359308243f,21.1823635101f,-0.1961329877f,10.0420093536f,3.9618864059f,-15.6906394958f,1.216024518f,25.7718753815f,-1.4121575356f,7.6099600792f,3.7657535076f,9.6497430801f,5.1779112816f,21.0254573822f,0.2745862007f,10.0812358856f,4.4718322754f,-10.5127286911f,0.3530393839f,20.9862308502f,-2.5889556408f,4.6679654121f,3.4519407749f,10.1204624176f,2.3143694401f,20.3978309631f,-4.5110588074f,8.6690788269f,1.4906107187f,-14.1215753555f,2.7066352367f,23.026014328f,-1.6475172043f,7.1784677505f,3.6480736732f,9.0613441467f,6.4723887444f,18.9072208405f,4.0795664787f,11.3757133484f,7.5707335472f,-10.4735021591f,-1.0983448029f,21.0254573822f,7.8453197479f,7.0607876778f,2.6281821728f,11.7679796219f,7.5315070152f,20.0055656433f,4.0011129379f,5.9624428749f,4.8248715401f,-12.3171520233f,0.0784531981f,24.4381713867f,-1.5690639019f,5.4132704735f,4.5110588074f,8.9044380188f,7.0607876778f,21.57462883f,2.392822504f,5.766310215f,5.0602312088f,-12.4740581512f,-0.3922659755f,19.8878860474f,-3.4519407749f,2.3535959721f,5.4917240143f,11.0226745605f,9.5712900162f}
        };

        int[][] indices = {
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150},
                {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150}
        };

        int[] groundTruth = {1,1,1,2,2,2,3,3,3};
        int[] labels = new int[9];
        double[] probs = new double[9];
        int isProb = 0; // Not probability prediction
        String modelFileLoc = Constants.MODEL_FILE;
        float accuracy = callSVMForTestingAccuracy(values, indices, groundTruth, isProb, modelFileLoc, labels, probs);
        return accuracy;
    }

    public float callSVMForTestingAccuracy(float values[][], int indices[][], int groundTruth[], int isProb, String modelFile,
                       int labels[], double probs[]) {
        // SVM type
        final int C_SVC = 0;
        final int NU_SVC = 1;
        final int ONE_CLASS_SVM = 2;
        final int EPSILON_SVR = 3;
        final int NU_SVR = 4;

        // For accuracy calculation
        int correct = 0;
        int total = 0;
        float error = 0;
        float sump = 0, sumt = 0, sumpp = 0, sumtt = 0, sumpt = 0;
        float MSE, SCC, accuracy;

        int num = values.length;
        int svm_type = C_SVC;
        if (num != indices.length)
            return -1;
        // If isProb is true, you need to pass in a real double array for probability array
        int r = doClassificationNative(values, indices, isProb, modelFile, labels, probs);

        // Calculate accuracy

            if (groundTruth.length != indices.length) {
                return -1;
            }
            for (int i = 0; i < num; i++) {
                int predict_label = labels[i];
                int target_label = groundTruth[i];
                if(predict_label == target_label)
                    ++correct;
                error += (predict_label-target_label)*(predict_label-target_label);
                sump += predict_label;
                sumt += target_label;
                sumpp += predict_label*predict_label;
                sumtt += target_label*target_label;
                sumpt += predict_label*target_label;
                ++total;
            }

            if (svm_type==NU_SVR || svm_type==EPSILON_SVR)
            {
                MSE = error/total; // Mean square error
                SCC = ((total*sumpt-sump*sumt)*(total*sumpt-sump*sumt)) / ((total*sumpp-sump*sump)*(total*sumtt-sumt*sumt)); // Squared correlation coefficient
            }
            accuracy = (float)correct/total*100;
            return accuracy;
    }
}
